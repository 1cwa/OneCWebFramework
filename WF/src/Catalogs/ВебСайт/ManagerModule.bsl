#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает адрес во временном хранилище с двоичными данными всех выгруженных страниц.
// и настроек личного кабинета.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка - адрес  во временном хранилище с двоичными данными всех выгруженных страниц.
//
Функция ВыгрузитьСтраницы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
    Запись = Новый ЗаписьXML;
    Запись.УстановитьСтроку();
    
    //записываем объявление xml файла: <?xml version="1.0"?>
    Запись.ЗаписатьОбъявлениеXML();
    
    //записываем корневой элемент, по спецификации xml он может быть только один, назовем его "Данные"
    Запись.ЗаписатьНачалоЭлемента("Настройки");
	
	Запись.ЗаписатьНачалоЭлемента("Страницы");
    //для того чтобы пространства имен не объявлялись сериализатором в кажом элементе, пишем их в корневой элемент
    //они будут работать на все вложеные элементы
    //пространство имен по-умолчанию
    Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.1/data/enterprise/current-config");
    
    //пространства имен остальные префиксы
    Запись.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
    Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
    
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВебСайт.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВебСайт КАК ВебСайт
		|ГДЕ
		|	НЕ ВебСайт.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Кол = 4;
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
	    //вместо этого кода в боевой реализации выгрузки будет создание ОбъектаXDTO и его сериализация
	    //через ФабрикуXDTO и загруженные в нее схемы конфигурации приемника
	    СериализаторXDTO.ЗаписатьXML(Запись, Выборка.Ссылка.ПолучитьОбъект());
				
	КонецЦикла;
	
    //записываем конец элемента Страницы
    Запись.ЗаписатьКонецЭлемента();	
	
	// Записываем константы.
	Запись.ЗаписатьНачалоЭлемента("Константы");
	
			
	// записываем конец корневого элемента константы
	Запись.ЗаписатьКонецЭлемента();	
	
    // записываем конец корневого элемента
    Запись.ЗаписатьКонецЭлемента();	
	
	//покажем что получилось
    Текст = Запись.Закрыть();	
	
	// Записываем файл
	XMLФайл = КаталогВременныхФайлов() + "data.xml";
	МойXML 	= Новый ТекстовыйДокумент; 
	МойXML.ДобавитьСтроку(Текст);
	МойXML.Записать(XMLФайл);
	
	// Делаем архив
	ИмяАрхива 	= ПолучитьИмяВременногоФайла();
	НовыйАрхив 	= Новый ЗаписьZipФайла(ИмяАрхива);
	НовыйАрхив.Добавить(XMLФайл);
	НовыйАрхив.Записать();
	
	ДД 		= Новый ДвоичныеДанные(ИмяАрхива);
	Адрес 	= ПоместитьВоВременноеХранилище(ДД);
	
	УдалитьФайлы(XMLФайл);
	УдалитьФайлы(ИмяАрхива);
	
	Возврат Адрес;
	
КонецФункции

// Загружает все страницы личного кабинета и настройки из адреса
//
// Параметры:
//	Адрес - Строка - адрес во временном хранилище с двоичными данными всех выгруженных 
//					 страниц в виде архива и файдла data.xml в нем.
//
Процедура ЗагрузитьСтраницы(Знач Адрес) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяАрхива 	= ПолучитьИмяВременногоФайла();
	ДД 			= ПолучитьИзВременногоХранилища(Адрес);
	ДД.Записать(ИмяАрхива);
	
	ПапкаНазначения = КаталогВременныхФайлов();
	
	// Распаковка из архива
	ЧтениеZIP = Новый ЧтениеZipФайла(ИмяАрхива);
	ЧтениеZIP.Извлечь(ЧтениеZIP.Элементы.Найти("data.xml"), ПапкаНазначения);
	ЧтениеZIP.Закрыть();	
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ПапкаНазначения + "data.xml");
	Текст = ТД.ПолучитьТекст();
	
	Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(Текст);
    
    //прочитаем начало xml файла
    Чтение.ПерейтиКСодержимому();
    
    //прочитаем начало корневого элемента
    Чтение.Прочитать();
	Чтение.Прочитать();
		
    //читаем содержимое пока текущим не станет конец корневого элемента, т.к. мы писали туда только целые элементы справочника,
    //а сериализатор читает каждый из их полностью, то мы упремся именно в конец корневого
    Пока Чтение.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		Если Чтение.ЛокальноеИмя = "Константы" Тогда
			Прервать;
		КонецЕсли;
		
        //читаем очередной элемент справочника
        ОбъектСправочника = СериализаторXDTO.ПрочитатьXML(Чтение);
				
		ОбъектСправочника.ОбменДанными.Загрузка = Истина;
		ОбъектСправочника.Записать();
		
	КонецЦикла;
	
	Чтение.Прочитать();
	
	// Тут читаем константы.
	Пока Чтение.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
			Чтение.Прочитать();
	КонецЦикла;
    
    Чтение.Закрыть();
	
КонецПроцедуры

// Очистка всех данных личного кабиента.
//
// Параметры:
//	Нет.
//
Процедура ОчиститьСтраницыИНастройки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Выборка = Справочники.ВебСайт.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		ОбъектСправочника = Выборка.ПолучитьОбъект();
		ОбъектСправочника.ОбменДанными.Загрузка = Истина;
		ОбъектСправочника.Удалить();
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

// Возвращает относительный URL страницы личного кабинета.
//
// Параметры:
//	Страница - СправочникСсылка.СтраницыЛичногоКабинета - страница личного кабинета.
//
// Возвращаемое значение:
//	Строка - URL страницы. Пример folder/script.js (страница script.js находится в папке folder).
//
Функция ОтносительныйURLСтраницы(Знач Страница) Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(Страница) Тогда
		
		Результат 		= Страница.Наименование;
		Пока ЗначениеЗаполнено(Страница.Родитель) Цикл			
			Страница 	= Страница.Родитель;
			Результат 	= Страница.Наименование + "/" + Результат;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует расширение файла в нижний регистр без точки.
//
// Параметры:
//  Расширение - Строка - Расширение для преобразования.
//
// Возвращаемое значение:
//  Строка - преобразованное расширение.
//
Функция РасширениеБезТочки(Знач Расширение) Экспорт
	
	Расширение = НРег(СокрЛП(Расширение));
	
	Если Сред(Расширение, 1, 1) = "." Тогда
		Расширение = Сред(Расширение, 2);
	КонецЕсли;
	
	Возврат Расширение;
	
КонецФункции

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры:
//  ИмяФайла - Строка - имя файла с именем каталога или без.
//
// Возвращаемое значение:
//   Строка - расширение файла.
//
Функция ПолучитьРасширениеИмениФайла(Знач ИмяФайла) Экспорт
	
	РасширениеФайла = "";
	МассивСтрок = СтрРазделить(ИмяФайла, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;
	Возврат РасширениеФайла;
	
КонецФункции

// Функция - Тип файла
//
// Параметры:
//  ИмяФайла - Строка	 - имя файла.
// 
// Возвращаемое значение:
//  Строка - тип файла по MIME/
//
Функция ТипФайла(Знач ИмяФайла) Экспорт
	
	Перем тТип, чСтрок;
	тТип = СтрЗаменить(ИмяФайла, ".", Символы.ПС);
	чСтрок = СтрЧислоСтрок(тТип);
	Если чСтрок<2 Тогда
		Возврат "";
	КонецЕсли;
	тТип = НРег(СтрПолучитьСтроку(тТип, чСтрок));
	
	Если тТип="htm" ИЛИ тТип="html" Тогда
		
		Возврат "text/html";
		
	ИначеЕсли тТип="css" Тогда
		
		Возврат "text/css";
		
	ИначеЕсли тТип="js" ИЛИ тТип="javascript" Тогда
		
		Возврат "text/JavaScript";
		
	ИначеЕсли тТип="ico" Тогда
		
		Возврат "image/ico";
		
	ИначеЕсли тТип="png" Тогда
		
		Возврат "image/png";
		
	ИначеЕсли тТип="jpg" ИЛИ тТип="jpeg" ИЛИ тТип="jpe" Тогда
		
		Возврат "image/jpeg";
		
	ИначеЕсли тТип="gif" Тогда
		
		Возврат "image/gif";
		
	ИначеЕсли тТип="tiff" ИЛИ тТип="tif" Тогда
		
		Возврат "image/tiff";
		
	ИначеЕсли тТип="svg" Тогда
		
		Возврат "image/svg+xml";
		
	ИначеЕсли тТип="bmp" Тогда
		
		Возврат "image/BMP";
		
	ИначеЕсли тТип="pdf" ИЛИ тТип="rtf" ИЛИ тТип="zip" Тогда
		
		Возврат "application/"+тТип;
		
	ИначеЕсли тТип="txt" Тогда
		
		Возврат "text/plain";
		
	ИначеЕсли тТип="aif" ИЛИ тТип="aiff" ИЛИ тТип="aifc" Тогда
		
		Возврат "audio/x-aiff";
		
	ИначеЕсли тТип="wav" Тогда
		
		Возврат "audio/x-wav";
		
	ИначеЕсли тТип="pdf" ИЛИ тТип="rtf" ИЛИ тТип="zip" Тогда
		
		Возврат "application/"+тТип;
				
	ИначеЕсли тТип="doc" ИЛИ тТип="docx" Тогда
	
		Возврат "application/msword";
	
	ИначеЕсли тТип="xls" ИЛИ тТип="xlsx" ИЛИ тТип="mxl" Тогда
	
		Возврат "application/vnd.ms-excel";
		
	ИначеЕсли тТип="swf" Тогда
		
		Возврат "application/x-shockwave-flash";
		
	ИначеЕсли тТип="pps" ИЛИ тТип="ppt" Тогда
		
		Возврат "application/vnd.ms-powerpoint"
		
	ИначеЕсли тТип="msg" Тогда
		
		Возврат "application/vnd.ms-outlook"
		
	ИначеЕсли тТип="mpeg" ИЛИ тТип="mpg" ИЛИ тТип="mpe" Тогда
		
		Возврат "video/mpeg";
		
	ИначеЕсли тТип="qt" ИЛИ тТип="mov" Тогда
		
		Возврат "video/quicktime";
		
	ИначеЕсли тТип="avi" Тогда
		
		Возврат "video/x-msvideo";
		
	ИначеЕсли тТип="movie" Тогда
		
		Возврат "video/x-sgi-movie";
		
	ИначеЕсли тТип="eot" Тогда
		
		Возврат "application/vnd.ms-fontobject";
		
	ИначеЕсли тТип="ttf" Тогда
		
		Возврат "application/x-font-ttf";
		
	ИначеЕсли тТип="woff" Тогда
		
		Возврат "application/font-woff";
		
	ИначеЕсли тТип="woff2" Тогда
		
		Возврат "application/font-woff";
		
	ИначеЕсли тТип="pug" Тогда
		
		Возврат "template/pug";

		
	КонецЕсли;
	
	Возврат "application/unknown";
	
КонецФункции

Функция РасширениеФайла(Знач ИмяФайла) Экспорт
	
	Перем тТип, чСтрок;
	тТип = СтрЗаменить(ИмяФайла, ".", Символы.ПС);
	чСтрок = СтрЧислоСтрок(тТип);
	Если чСтрок<2 Тогда
		Возврат "";
	КонецЕсли;
	тТип = НРег(СтрПолучитьСтроку(тТип, чСтрок));
	Возврат тТип;
	
КонецФункции


// Сохраняет файлы загруженные в элементы справочника в выбранный каталог
//
// Параметры:
//	ВыбранныйКаталог - Строка - адрес каталога куда будут сохранены элементы. 
//					 
//	Родитель - СправочникСсылка.ВебСайт - родитель элементов которые необходимо 
//					 выгрузить. 					
//	ФильтрТипов - Массив - массив типов фалов/расширений которые будут выгруженны.
//					 
//	Перезаписывать - Булево - определяет будут ли перезаписываться уже существующие
//					 файлы.
//
Процедура СохранитьПодчиненныеЭлементыВФайлы(ВыбранныйКаталог,Родитель,ФильтрТипов = Неопределено,Перезаписывать = Истина) Экспорт
	
	МассивСохраняемыхЭлементов = ПолучитьСтруктуруПодчиненныхЭлементов(Родитель,ФильтрТипов);
	
	Для каждого Элемент из МассивСохраняемыхЭлементов цикл
		ПолноеИмя = ВыбранныйКаталог + Элемент.Путь; 
		Если Элемент.ЭтоПапка тогда
			СоздатьКаталог(ПолноеИмя);
		Иначе
			Данные = ПолучитьИзВременногоХранилища(Элемент.АдресФайла);
			Файл = Новый Файл(ПолноеИмя);
			Если Данные <> Неопределено и Файл.Существует() Тогда
				Если не Перезаписывать тогда
					Продолжить;
				КонецЕсли;
				УдалитьФайлы(ПолноеИмя);
			КонецЕсли;			
			Данные.Записать(ПолноеИмя);
			УдалитьИзВременногоХранилища(Элемент.АдресФайла);
		КонецЕсли;
	КонецЦикла;		

	
КонецПроцедуры

Функция ПолучитьСтруктуруПодчиненныхЭлементов(Родитель,ФильтрТипов = Неопределено) Экспорт
	
	МассивФайлов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВебСайт.Ссылка КАК Ссылка,
		|	ВебСайт.Наименование КАК ИмяФайла,
		|	ВебСайт.ЭтоГруппа КАК ЭтоПапка,
		|	ЕСТЬNULL(ВебСайт.Родитель.Наименование, """") КАК Родитель
		|ИЗ
		|	Справочник.ВебСайт КАК ВебСайт
		|ГДЕ
		|	(ВебСайт.Родитель В ИЕРАРХИИ (&Родитель)
		|			ИЛИ ВебСайт.Родитель = &Родитель
		|			ИЛИ ВебСайт.Ссылка = &Родитель
		|			ИЛИ &Родитель = ЗНАЧЕНИЕ(Справочник.ВебСайт.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтекИерархияПапок = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Путь = "";
		Если Выборка.Родитель = "" тогда
			СтекИерархияПапок.Очистить();
		КонецЕсли;
		ГлубинаТекущейЗаписи = СтекИерархияПапок.Найти(Выборка.Родитель); 
		Если ГлубинаТекущейЗаписи = Неопределено тогда
			СтекИерархияПапок.Добавить(Выборка.Родитель);
		Иначе 
			Пока ГлубинаТекущейЗаписи < СтекИерархияПапок.ВГраница() цикл
				 СтекИерархияПапок.Удалить(СтекИерархияПапок.ВГраница());
			КонецЦикла;                                      			
		КонецЕсли;
		Для каждого ЭлементСтека из СтекИерархияПапок цикл
			Путь = Путь + "\" + ЭлементСтека;
		КонецЦикла;
		Если ФильтрТипов <> Неопределено 
			И не Выборка.ЭтоПапка тогда		
			ТипФайла = ТипФайла(Выборка.ИмяФайла);
			РасширениеФайла = РасширениеФайла(Выборка.ИмяФайла);
			Если ФильтрТипов.Найти(РасширениеФайла) = неопределено 
				И ФильтрТипов.Найти(ТипФайла) = неопределено тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтруктураВыгружаемогоФайла = Новый Структура("Путь,Имя,ЭтоПапка,АдресФайла");
		СтруктураВыгружаемогоФайла.Имя = Выборка.ИмяФайла;
		СтруктураВыгружаемогоФайла.Путь = Путь + "\" + Выборка.ИмяФайла;
		СтруктураВыгружаемогоФайла.ЭтоПапка = Выборка.ЭтоПапка; 
		Если не Выборка.ЭтоПапка тогда
			СтруктураВыгружаемогоФайла.АдресФайла = ПолучитьФайлНаСервере(Выборка.Ссылка);
		КонецЕсли;
		МассивФайлов.Добавить(СтруктураВыгружаемогоФайла);
	КонецЦикла;	
	
	Возврат МассивФайлов;
	
КонецФункции

Функция ПолучитьФайлНаСервере(ЭлементСправочника) Экспорт
	ДанныеФайла = ЭлементСправочника.ХранилищеФайла.Получить();
	Если ТипЗнч(ДанныеФайла)=Тип("Строка") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла();
		Текст = Новый ЗаписьТекста(ВремФайл, КодировкаТекста.UTF8);
		Текст.Записать(ДанныеФайла);
		Текст.Закрыть();
		ДанныеФайла = Новый ДвоичныеДанные(ВремФайл);
		УдалитьФайлы(ВремФайл);
	КонецЕсли;
	Возврат ПоместитьВоВременноеХранилище(ДанныеФайла);
КонецФункции

