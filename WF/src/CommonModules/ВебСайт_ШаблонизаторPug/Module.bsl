#Область КонстантныеЗначения

Функция КаталогШаблоновPUG() Экспорт
	
	Возврат КаталогВременныхФайлов() + "Pug1CTemplates";
	
КонецФункции

Функция КаталогШаблоновHTML() Экспорт
	
	Возврат КаталогВременныхФайлов() + "Htm1CPages\";
	
КонецФункции

// Существенно ускоряет выполнение, 
// но дефакто инициализирует локальный Node.js сервер на сервере 1С
//
Функция ИспользоватьHTTPШаблонизатор()
	
	Возврат Истина;
	
КонецФункции

Функция КаталогJSONФайлов()
	
	Возврат КаталогВременныхФайлов() + "JSONDataWeb1C\";
	
КонецФункции

Функция ИмяФайлаприложения()
	
	Если ИспользоватьHTTPШаблонизатор() Тогда 
		Возврат "AppHttp.exe";
	Иначе
		Возврат "App.exe";	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПолноеИмяПриложения()
	
	Каталогфайлов = КаталогВременныхФайлов();
	ИмяПриложения = Каталогфайлов + ИмяФайлаприложения();
	Возврат ИмяПриложения;
	
КонецФункции

Функция ИмяМакетаПриложения()
	
	Если ИспользоватьHTTPШаблонизатор() Тогда 
		Возврат "PugRenderHttp";
	Иначе
		Возврат "PugRender";	
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область Инициализация

// Происходит инициализация как каталога с шаблонами так и исполняемой среды
Процедура ИнициализироватьСреду(Перезапись = Ложь) Экспорт 
		
	ИмяПриложения = ПолучитьПолноеИмяПриложения();	
	Файл = Новый Файл(ИмяПриложения);
	Если Файл.Существует() Тогда		
		Если Перезапись Тогда
			Если ИспользоватьHTTPШаблонизатор() Тогда
				ЗапуститьПриложение("taskKill /F /IM " + ИмяФайлаприложения());	
			КонецЕсли;			
			УдалитьФайлы(ИмяПриложения);
			МакетСНодой = ПолучитьОбщийМакет(ИмяМакетаПриложения());	
			МакетСНодой.Записать(ИмяПриложения);								
		КонецЕсли;
		
		Если ИспользоватьHTTPШаблонизатор() Тогда
			ЗапуститьПриложение(ИмяПриложения);	
		КонецЕсли;	
	Иначе
		МакетСНодой = ПолучитьОбщийМакет(ИмяМакетаПриложения());	
		МакетСНодой.Записать(ИмяПриложения);
		Если ИспользоватьHTTPШаблонизатор() Тогда
			ЗапуститьПриложение(ИмяПриложения);	
		КонецЕсли;
	КонецЕсли;
	
	СохранитьPugФайлы(Перезапись);
	СохранитьJSONШаблоны(Перезапись);
	СоздатьКаталогHTML(Перезапись);
		
КонецПроцедуры

// Проверяет что рабочая среда инициализирована
Функция СредаИнициализирована()
		
	ИмяПриложения = ПолучитьПолноеИмяПриложения();
	Файл = Новый Файл(ИмяПриложения);
	Если Файл.Существует() Тогда
		
		Если ИспользоватьHTTPШаблонизатор() Тогда
			Если HTTPСервисДоступен() Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;					
			КонецЕсли;
		Иначе
			Возврат Истина;	
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверяет что сервис доступен на определенном порту
Функция HTTPСервисДоступен()
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 8282);
	Запрос = Новый HTTPЗапрос("/");
	Запрос.УстановитьТелоИзСтроки("{""jsondata"":""ping""}");
	
	Ответ = Неопределено;
	Попытка
		Ответ = HTTPСоединение.ОтправитьДляОбработки(Запрос);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		Возврат Истина;	
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

// Сохраняет PUG файлы из шаблонов для работы с ними приложения
Процедура СохранитьPugФайлы(Перезапись = Ложь)
	
	КаталогPugШаблонов = КаталогШаблоновPUG();
	МассивТипов = Новый Массив();
	МассивТипов.Добавить("pug"); 
	Справочники.ВебСайт.СохранитьПодчиненныеЭлементыВФайлы(КаталогPugШаблонов, Справочники.ВебСайт.ПустаяСсылка(), МассивТипов, Перезапись);
	
КонецПроцедуры

// Сохраняет шаблоны JSON из алгоритмов получения данных
Процедура СохранитьJSONШаблоны(Перезапись = Ложь)
	
	ИмяКаталога = КаталогJSONФайлов();
	Файл = Новый Файл(ИмяКаталога);
	Если Не Файл.Существует() Тогда		
		СоздатьКаталог(ИмяКаталога);	
	КонецЕсли;	
	
	ВыбАлгоритмы = Справочники.ВебСайт_АлгоритмыПолученияДанных.Выбрать();
	Пока ВыбАлгоритмы.Следующий() Цикл
		Если Не ВыбАлгоритмы.ПометкаУдаления Тогда
			Если ЗначениеЗаполнено(ВыбАлгоритмы.ПримерЗагрушка) Тогда 
				ЗаписатьUTF8БезBOM(ИмяКаталога + ВыбАлгоритмы.ИмяФайлаJSON, ВыбАлгоритмы.ПримерЗагрушка);
			КонецЕсли;			
		КонецЕсли;		
	КонецЦикла;
		
КонецПроцедуры

Процедура СоздатьКаталогHTML(Перезапись = Ложь)
	
	ИмяКаталога = КаталогШаблоновHTML();
	Файл = Новый Файл(ИмяКаталога);
	Если Не Файл.Существует() Тогда		
		СоздатьКаталог(ИмяКаталога);	
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти

#Область ПолученияСтраницыHTML

// Возвращает непосредственно HTML страницу
Функция ПолучитьHTMLСтраницу(СтраницаPUG) Экспорт
	
	Если Не СредаИнициализирована() Тогда
		ИнициализироватьСреду();		
	КонецЕсли;
	
	ПолноеИмяСтраницыPUG = КаталогШаблоновPUG() + ВебСайт_ПовтИспШаблонизаторPug.ПолучитьПолноеИмяФайлаpug(СтраницаPUG);
	ПолноеИмяСтраницыHTML  = КаталогШаблоновHTML() + СтрЗаменить(СтраницаPUG.Наименование, ".pug", ".html");	
	АлгоритмыОбновленияДанных = ВебСайт_ПовтИспШаблонизаторPug.ПолучитьАлгоритмыЗаполнения(СтраницаPUG);
	JSONФайлы = КаталогJSONФайлов();
	ВыполнитьАлгоритмыОбновленияДанных(АлгоритмыОбновленияДанных);
	Страница = СформироватьСтраницуHTML(ПолноеИмяСтраницыPUG, JSONФайлы, ПолноеИмяСтраницыHTML);
	Возврат Страница;
	
КонецФункции


Функция СформироватьСтраницуHTML(ПолноеИмяСтраницыPUG, АлгоритмыОбновленияДанных, ПолноеИмяСтраницыHTML)
	
	КомандаЗапуска = "";
	Хранилище = Неопределено;
	
	Приложение = ПолучитьПолноеИмяПриложения();
	Данные = КаталогJSONФайлов();
	Шаблон = ПолноеИмяСтраницыPUG;
	ИтоговаяСтраница = ПолноеИмяСтраницыHTML;
	
	СтруктураПараметров = Новый Структура("jsondata, template, page", Данные, Шаблон, ИтоговаяСтраница);
	
	Если ИспользоватьHTTPШаблонизатор() Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураПараметров);
		СтрJSON = ЗаписьJSON.Закрыть();

		HTTPСоединение = Новый HTTPСоединение("localhost", 8282);
		Запрос = Новый HTTPЗапрос("/");
		Запрос.УстановитьТелоИзСтроки(СтрJSON);
		Ответ = HTTPСоединение.ОтправитьДляОбработки(Запрос);
	Иначе
		КомандаЗапуска = Приложение + " " + Данные + " " + Шаблон + " " + ИтоговаяСтраница;	
		ЗапуститьПриложение(КомандаЗапуска,,Истина);
	КонецЕсли;
	
	Попытка
		ДД = Новый ДвоичныеДанные(ПолноеИмяСтраницыHTML);
		Хранилище = Новый ХранилищеЗначения(ДД);
	Исключение		
		ЗаписьЖурналаРегистрации("Ошибка.Не удалось получить страницу HTML для шаблона" + ПолноеИмяСтраницыPUG, УровеньЖурналаРегистрации.Ошибка);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Хранилище;
	
КонецФункции

// Выполняет алгоритмы и помещает результаты их выполнения в каталог JSON файлов
Процедура ВыполнитьАлгоритмыОбновленияДанных(МассивАлгоритмов)
	
	Если не ЗначениеЗаполнено(МассивАлгоритмов) Тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого Алгоритм Из МассивАлгоритмов Цикл
		
		JSON = "";
		Если ЗначениеЗаполнено(Алгоритм.АлгоритмПолученияДанных) Тогда
			Выполнить(Алгоритм.АлгоритмПолученияДанных);	
		Иначе
			JSON = Алгоритм.ПримерЗагрушка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(JSON) Тогда
			СохранитьJSON(Алгоритм.ИмяФайлаJSON, JSON);	
		КонецЕсли;		
		
	КонецЦикла;
	
	
КонецПроцедуры



Процедура СохранитьJSON(Имя, Данные)
	
	ПолноеИмя = КаталогJSONФайлов() + Имя;
	ЗаписатьUTF8БезBOM(ПолноеИмя, Данные);
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеФункции
Процедура ЗаписатьUTF8БезBOM(Имя, Данные)
	
	ФайлUTF = Новый ЗаписьТекста(Имя, КодировкаТекста.ANSI);
    ФайлUTF.Закрыть();
    ФайлUTF = Новый ЗаписьТекста(Имя,,, Истина);
    ФайлUTF.Записать(Данные);
    ФайлUTF.Закрыть();	

КонецПроцедуры
#КонецОбласти
